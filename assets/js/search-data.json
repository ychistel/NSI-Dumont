{
  
    
        "post0": {
            "title": "Récursivité",
            "content": "D&#233;finition . Une fonction récursive est une fonction qui s&#39;appelle elle-même. . .",
            "url": "https://ychistel.github.io/NSI-Dumont/langage%20de%20programmation/2021/09/16/R%C3%A9cursivit%C3%A9.html",
            "relUrl": "/langage%20de%20programmation/2021/09/16/R%C3%A9cursivit%C3%A9.html",
            "date": " • Sep 16, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Les nombres à virgule",
            "content": "Dans les langages de programmation comme Python, les nombres à virgule sont appelés des flottants et se notent avec un point. Par exemple, le nombre $2,5$ se note $2.5$. . La partie entière est composée de puissances de 2 positives; | La partie après la virgule (ou le point), est composée de puissances de 2 négatives.Exemple: begin{align*} 24,53_{10} &amp;= 2 times 10^{1} + 4 times 10^{0} + 5 times 10^{-1} + 3 times 10^{-2} 10,01_{2} &amp;= 1 times 2^{1} + 0 times 2^{0} + 0 times 2^{-1} + 1 times 2^{-2} end{align*} . | . Conversion binaire - d&#233;cimale . Pour convertir un nombre binaire en nombre décimal, on calcule la somme des puissances de 2 positives et négatives non nulles. On rappelle quelques valeurs de puissances de 2. . $2^{1}$ $2^{0}$ $2^{-1}$ $2^{-2}$ $2^{-3}$ $2^{-4}$ $2^{-5}$ . $2$ | $1$ | $0,5$ | $0,25$ | $0,125$ | $0,0625$ | $0,03125$ | . Exemple . Conversion du nombre binaire $1,01_{2}$ en base $10$. $1,01_{2}=1 times 2^{0} + 0 times 2^{-1} + 1 times 2^{-2} = 1+0+0,25 = 1,25_{10}$ . M&#233;thode . Pour convertir un nombre en écriture décimale en binaire (cas le plus fréquent puisque nous saisissons des nombres en base 10), nous procédons en deux temps. . Conversion de la partier entière avec la méthode des soustractions ou divisions successives; | Conversion de la partie après la vigule par multiplications par 2 successives. Après chaque multiplication par 2, on retire la partie entière obtenue et on recommence jusqu&#39;à obtenir la valeur 1.Exemple:Conversion du nombre $3,875$ en binaire:1. La partie entière : $3_{10}=11_{2}$ . | La partie après la virgule : begin{align*} 0,875 times 2 = 1,75 0,75 times 2 = 1,5 0,5 times 2 =1 end{align*} | . Exercice . Donner l&#39;écriture binaire du nombre $5,6875$. . Exercice . Donner l&#39;écriture binaire du nombre $0.2$. Que remaque-t-on ? . Conclusion . Les nombres à virgule ont une écriture binaire. Dans certains cas, la partie après la virgule est infinie. Comme la machine alloue un nombre de bits fini, la valeur est donc approchée et peut alors générer des erreurs dans les calculs. . Exemple . La valeur obtenue par le calcul $0,1+0,2$ en binaire est une valeur approchée qui s&#39;approche de la valeur exacte $0,3$. Les nombres $0,1$ et $0,2$ ont une partie après la virgule infinie donc approchée par la machine. Le nombre $0,3$ a lui aussi une valeur approchée par la machine. . Ci-dessous, des calculs effectués par Python qui montre ces approximations. . 0.1+0.2 . 0.30000000000000004 . 0.1*3 . 0.30000000000000004 . 0.1+0.1+0.1 . 0.30000000000000004 . 0.4-0.1 . 0.30000000000000004 . 0.5-0.2 . 0.3 .",
            "url": "https://ychistel.github.io/NSI-Dumont/2021/09/16/Numeration_flottant.html",
            "relUrl": "/2021/09/16/Numeration_flottant.html",
            "date": " • Sep 16, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "Composer avec fastai",
            "content": "Modifier la citation important . Dans le dossier _includes, on retrouve le template importatnt.html qui permet d&#39;afficher la citation répertoriée important. . . Attention: . 1. numero 1 2. numero 2 . . Attention: . ceci est une alerte! on écrit sur plusieurs lignes. Reste à savoir si tout est écrit dans la même div. . Avec un saut de ligne en prime! . . You can include info boxes .",
            "url": "https://ychistel.github.io/NSI-Dumont/2021/09/16/Composer-avec-fastpage.html",
            "relUrl": "/2021/09/16/Composer-avec-fastpage.html",
            "date": " • Sep 16, 2021"
        }
        
    
  
    
        ,"post3": {
            "title": "Machine de Turing",
            "content": "Introduction . Alan Turing est un mathématicien et informaticien anglais du 20 ième siècle (1912-1954). Il est considéré comme l&#39;inventeur de l&#39;informatique moderne en créant la machine qui porte son nom. La machine de Turing est une machine virtuelle qui effectue des calculs d&#39;une manière mécanique sans intervention de l&#39;homme à part pour l&#39;entrée des données et la lecture du résultat. . Description . Une machine de Turing comprend: . un ruban infini divisé en plusieurs cases; | une tête de lecture et d&#39;écriture pour lire et écrire sur le ruban; | une table de transition qui contient les instructions du programme à réaliser. | . La table de transition est divisée en plusieurs états. À chaque état, des informations de lecture et d&#39;écriture sont données selon la valeur lue sur le ruban. Pour chaque information, un nouvel état est indiqué. . Principe . Les cases du ruban sont blanches. L&#39;écriture ajoute des symboles issus d&#39;un alphabet défini à l&#39;avance. Pour le binaire, l&#39;alphabet est donc constitué des symboles 0, 1 et blanc. . La tête de lecture et écriture peut se déplacer à droite ou à gauche. Elle peut lire ou écrire les symboles de l&#39;alphabet sur le ruban. . Les différents états de la table de transition indiquent si la tête de lecture / écriture doit lire ou écrire un symbole et se dplacer à droite ou à gauche. . A l&#39;issue du traitement, un nouvel état (ou la répétition du même état) est indiqué. . Un état final met fin à l&#39;exécution du programme. . Exercice . L&#39;exemple de la machine de Turing ci-dessus est appliqué au nombre binaire 111 avec la tête de lecture située sous le chiffre 1 situé le plus à droite. Quel est le résultat écrit sur le ruban après exécution de la machine de Turing ? | Écrire la table de transition d&#39;une machine de Turing qui ajoute 1 à un nombre binaire inscrit sur le ruban. | Simuler une machine de Turing . Il existe des concepteurs de machines de Turing. Il existe également des programmes qui permettent d&#39;appliquer une machine de Turing à un ruban virtuel. Ci-dessous, un programme javascript, qui simule une machine de Turing. . Vous pouvez compléter la table de transition pour vérifier votre code. Attention, la tête de lecture est située sous le chiffre de gauche et peut nécessiter un état supplémentaire. . Exercice . Écrire la table de transition d&#39;une machine de Turing qui renvoie le complément à 1 d&#39;un nombre binaire. | Appliquer votre table sur l&#39;émulateur. | Exercice . Déduire des deux exercices précédents la valeur binaire d&#39;un nombre entier signé. . Machine universelle . Turing a montré qu&#39;il existe une machine universelle qui peut simuler n&#39;importe quelle autre machine de Turing et donc exécuter n&#39;importe quel programme. Le programme d&#39;une machine de Turing est une donnée de la machine universelle. . Un programme peut donc être une donnée d&#39;un autre programme. Nous avons différents exmples de situations ou des programmes sont des données d&#39;un autre programme: . Un système d&#39;exploitation est un ensemble de programmes capbles d&#39;exécuter différents programmes. Cela signifie qu&#39;il sont les données des programmes du système d&#39;exploitation. | Les logiciels sont pour la plupart des programmes compilés, par souci d&#39;optimisation. Cela sigifie qu&#39;ils sont transformés en fichiers binaires directement lisibles par le processeur et donc rapide à l&#39;exécution. La compilation est un programme qui prend en donnée un programme écrit dans un certain lagage et transformé en fichier binaire exécutable. Par exemple, sur le système Linux, on a le compilateur gcc | Python est un langage interprété. L&#39;interpréteur de python prend en donnée un programme et le rend exécutable par l&#39;ordinateur. | L&#39;idée sous-jacente à la machine universelle est l&#39;inscription du programme à réaliser sur le ruban, c&#39;est à dire en tant que donnée de la machine de Turing. Aujourd&#39;hui, de nombreux logiciels utilisent des programmes en tant que donnée et les exécutent. . L&#39;interpréteur Python prend le programme Python en tant que donnée et le transforme en programme exécutable par la machine. Cet interpréteur peut être écrit dans un autre langage de progrmmation comme le langage C. | La compilation est un procédé qui consiste à transformer les programmes écrits avec un langage en binaire directement lisible par le processeur. Cela est un gain de temps par rapport à un iterpreteur qui réalise cette tache à chaque lancement du programme. Sur linux, le compilateur gcc transforme les programmes sources (écrit en langage C) en binaire. | Le langage Python possède deux instructions, eval et exec, qui prennent en entrée des chaines de caractères et cherchent à les exécuter. | . Exercice . Ouvrir l&#39;éditeur Python Thonny et créer un fichier python nommé donnée-programme.py. . Les questions sont liées par 2 ! . Écrire l&#39;instruction python qui affiche le message : machine de Turing. | Transformer cette instruction en chaine de caractère puis procéder à son exécution avec l&#39;instruction eval. | Écrire un programme qui vérifie la parité d&#39;un nombre entier saisi par l&#39;utilisateur sous forme d&#39;une chaîne de caractères. | Procéder à son exécution dans l&#39;interpréteur python. | Écrire la création d&#39;une liste de nombres entiers positifs multiples de 3 compris entre 1 et 20 sous forme d&#39;une chaine de caractères. | Procéder à son exécution et controler le résultat. | Calculabilit&#233; - D&#233;cidabilit&#233; . D&#233;finition . Un nombre, une fonction ou un problème sont calculables s&#39;il existe un algorithme et donc une machine de Turing capable de renvoyer un résultat numérique. . Un problème est décidable si et seulement si, il existe un algorithme qui résout le problème. Alan Turing a montré en 1936, qu&#39;il y a des problèmes indécidables. Pour le montrer, il a utilisé le problème de l&#39;arrêt. . Une vidéo de la démonstration du problème de l&#39;arrêt: . Preuve de l&#39;ind&#233;cidabilit&#233; . On considère que les algorithmes sont de 2 natures. Ceux qui s&#39;arrêtent et ceux qui ne s&#39;arrêtent pas. La preuve repose sur un raisonnement par l&#39;absurde qui est le suivant: . On suppose qu&#39;il existe un algorithme P qui résout le problème de l&#39;arrêt. Pour tout algorithme A, l&#39;algorithme P renvoie vrai si l&#39;algorithme A s&#39;arrête et faux dans le cas contraire. On peut déjà affirmer que notre algorithme P s&#39;arrête. | On construit un algorithme Q tel que: si un algorithme A s&#39;arrête donc P(A) est vrai, alors Q(A) ne s&#39;arrête pas; | si un algorithme A ne s&#39;arrête pas donc P(A) est faux, alors Q(A) s&#39;arrête. L&#39;existence de l&#39;algorithme Q dépend de l&#39;existence de l&#39;algorithme P. | . | Appliquons notre algorithme Q à lui même soit évaluer Q(Q) : si Q s&#39;arrête, alors Q(Q) ne s&#39;arrête pas et donc Q est un algorithme qui ne s&#39;arrête pas ! | si Q ne s&#39;arrête pas, alors Q(Q) s&#39;arrête et donc Q est un algorithme qui s&#39;arrête ! On a une contradiction, donc l&#39;algorithme Q n&#39;existe pas et alors P n&#39;existe pas non plus. | . | . Le problème de l&#39;arrêt ne peux pas se résoudre par un algorithme donc c&#39;est un problème indécidable. Il existe d&#39;autres problèmes indécidables et fonctions non calculables. Cela prouve qu&#39;un ordinateur ne peut pas tout calculer ou tout décider. .",
            "url": "https://ychistel.github.io/NSI-Dumont/jupyter/2021/09/07/Machine-de-Turing.html",
            "relUrl": "/jupyter/2021/09/07/Machine-de-Turing.html",
            "date": " • Sep 7, 2021"
        }
        
    
  
    
        ,"post4": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Attention: . There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: . Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://ychistel.github.io/NSI-Dumont/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post5": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://ychistel.github.io/NSI-Dumont/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://ychistel.github.io/NSI-Dumont/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://ychistel.github.io/NSI-Dumont/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}