{
  
    
        "post0": {
            "title": "Modularité - Gestion des bugs",
            "content": "Introduction . Un programme, quel que soit le langage de programmation utilisé, c&#39;est : . de très nombreuses, plusieurs milliers, lignes de code; | plusieurs fichiers et dossiers; | écrit par plusieurs personnes (développeurs, graphistes, spécialistes); | avoir recours à des programmes déjà existants; | plusieurs versions au cours du développement (version de production et versions de développement); | des bugs inconnus, non encore découverts. | . Le développement d&#39;un programme est un projet à long terme. Au fil du temps, selon l&#39;intérêt qu&#39;il suscite, celui-ci va grossir, se développer. Il arrive donc un moment ou l&#39;organisation de ce projet doit être solide et clair pour que les développeurs s&#39;y retrouvent, ne perdent pas leur temps à chercher qui fait quoi, ne pas recréer ce qui existe déjà, améliorer rapidement le code et corriger les bugs découverts. . La réussite d&#39;un tel projet s&#39;appuie sur des pratiques essentielles dont: . La modularité | La documentation | Les tests | Modularit&#233; . L&#39;intérêt d&#39;utiliser la modularité se décline en plusieurs raisons: . réutiliser des programmes ou des fonctions dans plusieurs programmes; | simplifier l&#39;écriture d&#39;un programme en les rendant plus lisibles et courts; | éviter de recréer des fonctions ou des programmes existants avec le risque de produire des erreurs (bugs); | en cas de bug sur une fonction, on corrige le module sans avoir à corriger tous les programmes qui utilisent cette fonction. | . En Python, un programme peut utiliser les fonctions d&#39;un autre programme appelé alors module (ou librairie). Ce module contient des fonctions qui seront utilisées par d&#39;autres programmes. . La syntaxe pour importer un module en Python est la suivante: . import module ce qui implique de préfixer les fonctions du module par le nom du module; | from module import fonctions qui permet d&#39;appeler les fonctions sans préfixe; | import module as alias qui permet d&#39;employer un alias si le nom de module est trop long. | . Remarque . Même s&#39;il est possible d&#39;importer les fonctions d&#39;un module avec la syntaxe from module import *, celle-ci est fortement déconseillée pour éviter des erreurs. Le risque, en cas d&#39;import de plusieurs modules, est d&#39;avoir des fonctions qui ont le même nom et donc provoquer un conflit entre elles. . Exercice . On utilisera l&#39;éditeur Thonny pour cet exercice. . Créer deux fichiers, dans un même doissier, nommés calcul.py et commerce.py. | Le fichier calcul.py est un module contenant des fonctions de calculs. Créer la fonction remise acceptant en argument 2 nombres réels x et y et qui renvoie la valeur x diminuée de y%. | Le fichier commerce.py est un programme qui utilise les fonctions du module calcul.py. Ce programme doit calculer une remise de n% sur tous les prix contenus dans un tuple. Les valeurs remisées seront enregistrées dans une liste. Par exemple, pour une remise de 25 % sur les prix (20,50,100), on obtient après exécution du programme la liste [15.0, 37.5, 75.0]. | . Le module est un programme . Les programmes doivent pouvoir s&#39;exécuter sur une machine sans avoir à ouvrir l&#39;éditeur ou l&#39;interpréteur Python. . Par exemple, le programme commerce.py doit pouvoir être exécuté depuis une console en saisissant la commande python commerce.py. . Un module est appelé par les autres programmes, mais c&#39;est aussi un programme qui doit pouvoir s&#39;exécuter. . Par exemple, en console, on doit pouvoir exécuter le module calcul.py. . Remarque . Il est fort probable que tout ne se passe pas comme attendu. On va donc commenter et examiner ce qui se passe ou pas. . Exercice . Vérifiez que vos programmes s&#39;exécutent en console. | Ajouter dans le module calcul.py un appel de la fonction remise puis un affichage du résultat. Relancez le programme en console. | Exécutez à nouveau le programme commerce.py. Que remarquez-vous ? | . On quitte la console et on poursuit avec l&#39;éditeur Thonny. En Python, il existe une fonction, locals, qui renvoie un dictionnaire contenant les variables, les fonctions et les modules utilisés par le programme. . Le dictionnaire affiché dépend du programme en cours d&#39;exécution. Il faut donc être attentif au programme interprété. . La variable __name__ contient la valeur __main__ (principal en français). Elle renseigne l&#39;interpréteur sur le programme en cours. . Lorsqu&#39;un module est importé, celui-ci contient aussi une variable __name__ dont la valeur est le nom du module. Cela va donc nous permettre de faire un test pour exécuter ou non un programme. . On donne le code d&#39;un programme principal qui est exécuté en important un module. . import module if __name__ == &#39;__main__&#39;: print(&quot;Le programme principal est exécuté.&quot;) . Le code du module importé est le suivant: . if __name__ == &#39;__main__&#39;: print(&quot;Le module est exécuté.&quot;) . Programme principal ex&#233;cut&#233; . Lorsque le programme principal est exécuté, le module est importé et la variale module.__name__ a pour valeur le nom du module, donc différent de __main__. . En conséquence l&#39;affichage Le module est exécuté. ne se fait pas. . La variable __name__ du programme principal a pour valeur __main__ donc l&#39;affichage Le programme principal est exécuté. se réalise. . Module ex&#233;cut&#233; . Lorsque le module est exécuté en tant que programme, la variable __name__ a pour valeur __main__ et alors l&#39;affichage Le module est exécuté. est réalisé. . Exercice . Modifiez vos programmes calcul.py et commerce.py. . . Documentation . La documentation est essentielle pour le développeur lui-même et aussi pour toutes les personnes qui reprendront le code. Elle doit si possible: . être claire, compréhensible et courte mais détaillée; | expliquer ce que fait un programme, une fonction ou un objet; | indiquer le rôle des variables, les paramètres d&#39;une fonction, les attributs d&#39;un objet; | renseigner le type des variables, paramètres des fonctions, attributs des objets et des valeurs renvoyées. | . Cette documentation sera accessible par les développeurs et les utilisateurs du code. En python, la fonction help prend en argument un nom de variable, nom d&#39;objet, nom de fonction ou nom de module sous la forme d&#39;une chaine de caratère et renvoie la documentation disponible. Si on saisit dans l&#39;interpréteur python la fonction help sans argument, celui-ci bascule sur une aide interactive qui propose un prompt en attente de saisie. Pour quitter cette aide, il sufffit de taper sur la touche entrée. . En Python, la documentation est directement insérée dans le code dans une docstring, c&#39;est à dire une chaine de caractères contenue dans des triples guillemets. . &quot;&quot;&quot;Ceci est une docstring pour la documentation ...&quot;&quot;&quot; . Exercice . Insérer une description du module calcul dans le fichier calcul.py et vérifier sa visibilité avec la fonction help. De même avec le fichier commerce.py. | Insérer une description dans la foncion remise qui donne: les valeurs à insérer | la valeur renvoyée Vérifier l&#39;affichage de la documentation avec help. | . | Typage des valeurs . Python permet de typer les variables et les paramètres des fonctions. Il suffit de placer juste après la variable ou le paramètre son type séparé par :. Par exemple x:int informe que x est une une variable de type nombre entier. . Il est également possible d&#39;indiquer le type de la valeur renvoyée par une fonction en insérant une flèche -&gt; suivie du type. Par exemple def ma_fonction(x:int) -&gt; float. . Remarque . Cette information ne contrôle pas le type de la variable et donc ne remplce pas un contrôle de ce type par un test. . Exercice . Ajouter le typage des arguments de la fonction remise ainsi que le type de la valeur renvoyée. | Afficher la documentation de la fonction remise. Que remarquez-vous ? | Ajoutez le typage de la variable prix puis affichez sa documentation. Que remarquez-vous ? | Les tests . Le développement nécessite de vérifier régulièrement son code, que ce soit dans sa syntaxe ou dans les valeurs produites par celui-ci. Concernant la syntaxe, Python intègre un vérificateur syntaxique qui signela la moindre erreur comme les erreurs d&#39;indentation. . Les erreurs liées à l&#39;exécution d&#39;une fonction qui ne renvoeint pas valeurs correctes sont souvent corrigées pendant le développement. Néanmoins, une erreur peut survenir bien après nécessitant un correctif. Cette correction peut avoir des effets indésirables sans qu&#39;on s&#39;en rende immédiatement compte. . Pour éviter une telle situation, il est utile d&#39;insérer des tests qui seront vérifiés après avoir corrigé son code. En Python, il existe une instruction assert qui lève une exception si la condition qui suit est fausse. Si la condition est vérifiée, l&#39;exécution du code se poursuit. . Exemple . On peut créer une instruction assert qui vérifie la valeur poisitive d&#39;un nombre. . x=-1 assert x&gt;0 . si le nombre est positif, le code se poursuit; | si le nombre est négatif ou nul, une erreur AssertionError est renvoyée et le code s&#39;interrompt. | . . Il est possible de préciser la nature de l&#39;erreur par un message. . Exemple . x=-1 assert x&gt;0,&quot;nombre x négatif ou nul&quot; . Exercice . Insérer un test dans la fonction remise qui vérifie que les valeurs saisies sont bien positives ou nulles | Insérer un test qui vérifie que les valeurs prix et pourcentage saisis sont bien des nombres. | . Remarque . Les tests qui vérifient les valeurs d&#39;un programme peuvent être traitées par le code lui-même avec structures conditionnelles. . Fonctions de test . Lorsqu&#39;on a créé une fonction, on peut écrire une série de tests qui vérifient que la fonction renvoie toujours la même valeur pour les valeurs passées en argument. C&#39;est notamment utile pour des valeurs particulières dont on sait qu&#39;elles peuvent provoquer une erreur. De plus, si on effectue une modification sur la fonction, on est alors informé si la fonction continue de renvoyer les valeurs attendues. . Exemple . La fonction remise du module calcul renvoie toujours la même valeur si on passe en argument un prix égal à 100 euros et une remise de 20%. Donc on peut écrire une instruction qui le vérifie. . if &#39;__name__&#39; == &#39;__main__&#39;: assert remise(100,20) == 80 . Notre programme peut même insérer une fonction regroupant tous les tests sur les fonctions du programme (module). Cette fonction sera appelée à l&#39;exécution du programme puis mis en commentaire tant que des modifications ne sont pas effectuées sur le programme. . Exemple . def tests(): assert remise(100,20) == 80 assert remise(0,0) == 0 assert remise(100,0) == 100 if &#39;__name__&#39; == &#39;__main__&#39;: tests() . Exercice . Écrire une fonction de test qui vérifie au moins 5 valeurs sur la fonction remise du module calcul. . .",
            "url": "https://ychistel.github.io/NSI-Dumont/langage%20de%20programmation/modularit%C3%A9/2021/09/15/Modulartie-Gestion-des-bugs.html",
            "relUrl": "/langage%20de%20programmation/modularit%C3%A9/2021/09/15/Modulartie-Gestion-des-bugs.html",
            "date": " • Sep 15, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Machine de Turing",
            "content": "Introduction . Alan Turing est un mathématicien et informaticien anglais du 20 ième siècle (1912-1954). Il est considéré comme l&#39;inventeur de l&#39;informatique moderne en créant la machine qui porte son nom. La machine de Turing est une machine virtuelle qui effectue des calculs d&#39;une manière mécanique sans intervention de l&#39;homme à part pour l&#39;entrée des données et la lecture du résultat. . Description . Une machine de Turing comprend: . un ruban infini divisé en plusieurs cases; | une tête de lecture et d&#39;écriture pour lire et écrire sur le ruban; | une table de transition qui contient les instructions du programme à réaliser. | . La table de transition est divisée en plusieurs états. À chaque état, des informations de lecture et d&#39;écriture sont données selon la valeur lue sur le ruban. Pour chaque information, un nouvel état est indiqué. . Principe . Les cases du ruban sont blanches. L&#39;écriture ajoute des symboles issus d&#39;un alphabet défini à l&#39;avance. Pour le binaire, l&#39;alphabet est donc constitué des symboles 0, 1 et blanc. . La tête de lecture et écriture peut se déplacer à droite ou à gauche. Elle peut lire ou écrire les symboles de l&#39;alphabet sur le ruban. . Les différents états de la table de transition indiquent si la tête de lecture / écriture doit lire ou écrire un symbole et se dplacer à droite ou à gauche. . A l&#39;issue du traitement, un nouvel état (ou la répétition du même état) est indiqué. . Un état final met fin à l&#39;exécution du programme. . Exercice . L&#39;exemple de la machine de Turing ci-dessus est appliqué au nombre binaire 111 avec la tête de lecture située sous le chiffre 1 situé le plus à droite. Quel est le résultat écrit sur le ruban après exécution de la machine de Turing ? | Écrire la table de transition d&#39;une machine de Turing qui ajoute 1 à un nombre binaire inscrit sur le ruban. | Simuler une machine de Turing . Il existe des concepteurs de machines de Turing. Il existe également des programmes qui permettent d&#39;appliquer une machine de Turing à un ruban virtuel. Ci-dessous, un programme javascript, qui simule une machine de Turing. . Vous pouvez compléter la table de transition pour vérifier votre code. Attention, la tête de lecture est située sous le chiffre de gauche et peut nécessiter un état supplémentaire. . Exercice . Écrire la table de transition d&#39;une machine de Turing qui renvoie le complément à 1 d&#39;un nombre binaire. | Appliquer votre table sur l&#39;émulateur. | Exercice . Déduire des deux exercices précédents la valeur binaire d&#39;un nombre entier signé. . Machine universelle . Turing a montré qu&#39;il existe une machine universelle qui peut simuler n&#39;importe quelle autre machine de Turing et donc exécuter n&#39;importe quel programme. Le programme d&#39;une machine de Turing est une donnée de la machine universelle. . Un programme peut donc être une donnée d&#39;un autre programme. Nous avons différents exmples de situations ou des programmes sont des données d&#39;un autre programme: . Un système d&#39;exploitation est un ensemble de programmes capbles d&#39;exécuter différents programmes. Cela signifie qu&#39;il sont les données des programmes du système d&#39;exploitation. | Les logiciels sont pour la plupart des programmes compilés, par souci d&#39;optimisation. Cela sigifie qu&#39;ils sont transformés en fichiers binaires directement lisibles par le processeur et donc rapide à l&#39;exécution. La compilation est un programme qui prend en donnée un programme écrit dans un certain lagage et transformé en fichier binaire exécutable. Par exemple, sur le système Linux, on a le compilateur gcc | Python est un langage interprété. L&#39;interpréteur de python prend en donnée un programme et le rend exécutable par l&#39;ordinateur. | L&#39;idée sous-jacente à la machine universelle est l&#39;inscription du programme à réaliser sur le ruban, c&#39;est à dire en tant que donnée de la machine de Turing. Aujourd&#39;hui, de nombreux logiciels utilisent des programmes en tant que donnée et les exécutent. . L&#39;interpréteur Python prend le programme Python en tant que donnée et le transforme en programme exécutable par la machine. Cet interpréteur peut être écrit dans un autre langage de progrmmation comme le langage C. | La compilation est un procédé qui consiste à transformer les programmes écrits avec un langage en binaire directement lisible par le processeur. Cela est un gain de temps par rapport à un iterpreteur qui réalise cette tache à chaque lancement du programme. Sur linux, le compilateur gcc transforme les programmes sources (écrit en langage C) en binaire. | Le langage Python possède deux instructions, eval et exec, qui prennent en entrée des chaines de caractères et cherchent à les exécuter. | . Exercice . Ouvrir l&#39;éditeur Python Thonny et créer un fichier python nommé donnée-programme.py. . Les questions sont liées par 2 ! . Écrire l&#39;instruction python qui affiche le message : machine de Turing. | Transformer cette instruction en chaine de caractère puis procéder à son exécution avec l&#39;instruction eval. | Écrire un programme qui vérifie la parité d&#39;un nombre entier saisi par l&#39;utilisateur sous forme d&#39;une chaîne de caractères. | Procéder à son exécution dans l&#39;interpréteur python. | Écrire la création d&#39;une liste de nombres entiers positifs multiples de 3 compris entre 1 et 20 sous forme d&#39;une chaine de caractères. | Procéder à son exécution et controler le résultat. | Calculabilit&#233; - D&#233;cidabilit&#233; . D&#233;finition . Un nombre, une fonction ou un problème sont calculables s&#39;il existe un algorithme et donc une machine de Turing capable de renvoyer un résultat numérique. . Un problème est décidable si et seulement si, il existe un algorithme qui résout le problème. Alan Turing a montré en 1936, qu&#39;il y a des problèmes indécidables. Pour le montrer, il a utilisé le problème de l&#39;arrêt. . Une vidéo de la démonstration du problème de l&#39;arrêt: . Preuve de l&#39;ind&#233;cidabilit&#233; . On considère que les algorithmes sont de 2 natures. Ceux qui s&#39;arrêtent et ceux qui ne s&#39;arrêtent pas. La preuve repose sur un raisonnement par l&#39;absurde qui est le suivant: . On suppose qu&#39;il existe un algorithme P qui résout le problème de l&#39;arrêt. Pour tout algorithme A, l&#39;algorithme P renvoie vrai si l&#39;algorithme A s&#39;arrête et faux dans le cas contraire. On peut déjà affirmer que notre algorithme P s&#39;arrête. | On construit un algorithme Q tel que: si un algorithme A s&#39;arrête donc P(A) est vrai, alors Q(A) ne s&#39;arrête pas; | si un algorithme A ne s&#39;arrête pas donc P(A) est faux, alors Q(A) s&#39;arrête. L&#39;existence de l&#39;algorithme Q dépend de l&#39;existence de l&#39;algorithme P. | . | Appliquons notre algorithme Q à lui même soit évaluer Q(Q) : si Q s&#39;arrête, alors Q(Q) ne s&#39;arrête pas et donc Q est un algorithme qui ne s&#39;arrête pas ! | si Q ne s&#39;arrête pas, alors Q(Q) s&#39;arrête et donc Q est un algorithme qui s&#39;arrête ! On a une contradiction, donc l&#39;algorithme Q n&#39;existe pas et alors P n&#39;existe pas non plus. | . | . Le problème de l&#39;arrêt ne peux pas se résoudre par un algorithme donc c&#39;est un problème indécidable. Il existe d&#39;autres problèmes indécidables et fonctions non calculables. Cela prouve qu&#39;un ordinateur ne peut pas tout calculer ou tout décider. .",
            "url": "https://ychistel.github.io/NSI-Dumont/jupyter/2021/09/07/Machine-de-Turing.html",
            "relUrl": "/jupyter/2021/09/07/Machine-de-Turing.html",
            "date": " • Sep 7, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://ychistel.github.io/NSI-Dumont/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://ychistel.github.io/NSI-Dumont/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://ychistel.github.io/NSI-Dumont/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://ychistel.github.io/NSI-Dumont/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}